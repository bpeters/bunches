package com.lwansbrough.ReactCamera;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.hardware.Camera;
import android.util.Base64;
import android.widget.Toast;

import com.facebook.react.bridge.Callback;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableMap;
import android.provider.MediaStore.Images.Media;
import android.graphics.BitmapFactory;
import android.graphics.Bitmap;
import android.graphics.Matrix;
import java.io.ByteArrayOutputStream;
import java.util.Map;
import java.util.HashMap;



// For video camera
import android.media.CamcorderProfile;
import android.media.MediaRecorder;
import android.os.Environment;
import android.util.Log;
import java.io.IOException;


import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.FileNotFoundException;
import java.io.BufferedInputStream;


// Added for Parse
import com.parse.Parse;
import com.parse.ParseObject;
import com.parse.ParseFile;
import com.parse.SaveCallback;
import com.parse.ProgressCallback;
import com.parse.ParseException;





public class ReactCameraModule extends ReactContextBaseJavaModule {
    ReactApplicationContext reactContext;
    private CameraInstanceManager cameraInstanceManager;

    // For video camera
    private boolean isRecording = false;
    MediaRecorder videoRecorder = null;
    MediaRecorder mediaRecorder = null;
    //public static String mFileName = Environment.getExternalStorageDirectory().getAbsolutePath() + "/DCIM/test.mp4";
    InputStream is = null;

    File mFileName = new File(Environment.getExternalStorageDirectory(), "bunches.mp4");


    public ReactCameraModule(ReactApplicationContext reactContext, CameraInstanceManager cameraInstanceManager) {
        super(reactContext);
        this.reactContext = reactContext;
        this.cameraInstanceManager = cameraInstanceManager;
    }

    @Override
    public String getName() {
        return "ReactCameraModule";
    }

    @Override
    public Map<String, Object> getConstants() {
        final Map<String, Object> constants = new HashMap<>();
            final Map<String, Object> constantsAspect = new HashMap<>();
            constantsAspect.put("stretch", "stretch");
            constantsAspect.put("fit", "fit");
        constants.put("Aspect", constantsAspect);
        return constants;
    }

    // @ReactMethod
    // public void convertToBase64(String path, final Callback callback) {

    //     Bitmap bitmap = BitmapFactory.decodeFile(path);
    //     ByteArrayOutputStream stream = new ByteArrayOutputStream();
    //     bitmap.compress(Bitmap.CompressFormat.JPEG, 100, stream);
    //     byte[] byteArray = stream.toByteArray();
    //     String encoded = Base64.encodeToString(byteArray, Base64.DEFAULT);
    //     callback.invoke(encoded);

    //     // Bitmap bm = BitmapFactory.decodeFile(path);
    //     // ByteArrayOutputStream baos = new ByteArrayOutputStream();  
    //     // bm.compress(Bitmap.CompressFormat.JPEG, 100, baos); //bm is the bitmap object   
    //     // byte[] b = baos.toByteArray(); 
    // }

    @ReactMethod
    public void capture(ReadableMap options, final Callback callback) {

        // ParseObject testObject = new ParseObject("TestObject");
        // testObject.put("foo", "bar");
        // testObject.saveInBackground();


        Camera camera = cameraInstanceManager.getCamera(options.getString("type"));
        // camera.stopPreview();
        camera.takePicture(null, null, new PictureTakenCallback(options, callback, reactContext));
    }

    private class PictureTakenCallback implements Camera.PictureCallback {
        ReadableMap options;
        Callback callback;
        ReactApplicationContext reactContext;

        PictureTakenCallback(ReadableMap options, Callback callback, ReactApplicationContext reactContext) {
            this.options = options;
            this.callback = callback;
            this.reactContext = reactContext;
        }

        private Bitmap RotateBitmap(Bitmap original, int deg)
        {
            Matrix matrix = new Matrix();
            matrix.postRotate((float)deg);
            return Bitmap.createBitmap(original, 0, 0, original.getWidth(), original.getHeight(), matrix, true);
        }

        @Override
        public void onPictureTaken(byte[] data, Camera camera) {
            camera.startPreview();

            int cameraOrientation = cameraInstanceManager.getCameraOrientation(camera);
            int cameraDirection = cameraInstanceManager.getCameraDirection(camera);

            // int finalNumber = cameraInstanceManager.getCameraOrientation(camera);
            // Log.v("Numberrr", String.format("EAN-8: %d", finalNumber));

            BitmapFactory.Options bitmapOptions = new BitmapFactory.Options();
            bitmapOptions.inSampleSize = options.getInt("sampleSize");
            Bitmap bitmap = RotateBitmap(BitmapFactory.decodeByteArray(data, 0, data.length, bitmapOptions), cameraOrientation + cameraDirection);

            switch(options.getString("target")) {
                case "base64":
                    ByteArrayOutputStream stream = new ByteArrayOutputStream();
                    bitmap.compress(Bitmap.CompressFormat.JPEG, 100, stream);
                    byte[] byteArray = stream.toByteArray();
                    String encoded = Base64.encodeToString(byteArray, Base64.DEFAULT);


                    // ParseFile file = new ParseFile("image.jpeg", byteArray);
                    // file.saveInBackground();

                    // ParseObject object = new ParseObject("TestObject");
                    // object.put("file", file);
                    // object.saveInBackground();



                    callback.invoke(encoded);
                break;
                case "gallery":
                    Media.insertImage(reactContext.getContentResolver(), bitmap, options.getString("title"), options.getString("description"));
                    callback.invoke();
                break;
                case "file":
                    callback.invoke();
                break;
            }
        }

    }


    private static byte[] readContentIntoByteArray(File file) {
            FileInputStream fileInputStream = null;
            byte[] bFile = new byte[(int) file.length()];
            try {
                //convert file into array of bytes
                fileInputStream = new FileInputStream(file);
                fileInputStream.read(bFile);
                fileInputStream.close();
                Log.d("hunter", "Converting...");
                for (int i = 0; i < bFile.length; i++)
                {
                    System.out.print((char) bFile[i]);
                }
            } catch (Exception e) {
                Log.d("hunter", "Messed up converting file to byte array: " + e.getMessage());
                e.printStackTrace();
            }
            return bFile;
        }
    


    @ReactMethod
    public void saveFileToParse(ReadableMap options, final Callback callback) {

        File file = new File(mFileName.getAbsolutePath());

        byte[] bytes = readContentIntoByteArray(file);

        // Save video to Parse
        final ParseFile video = new ParseFile("bunches.mp4", bytes);


        video.saveInBackground(new SaveCallback() {
            @Override
            public void done(ParseException e) {
                Log.d("hunter",video.getUrl() + " is saved!");
                if (e == null) {
                    ParseObject object = new ParseObject("TestObject");
                    Log.d("hunter", "Putting into parse...");
                    object.put("file", video);
                    object.saveInBackground();

                    callback.invoke("done");

                } else {
                    callback.invoke("error");
                    Log.e("hunter", "done: ", e);
                }
            }
        }, new ProgressCallback() {
            @Override
            public void done(Integer percentDone) {
                //callback.invoke(String.valueOf(percentDone));
                Log.d("hunter", "percent done: " + percentDone);
            }
        });

    }


    @ReactMethod
    public void captureVideo(ReadableMap options, final Callback callback) {
        Camera camera = cameraInstanceManager.getCamera(options.getString("type"));

        if(videoRecorder == null){
            videoRecorder = prepareVideo(camera); 
        }        
        if(!isRecording){            
            videoRecorder.start();
            isRecording = true;
        }  else {
            videoRecorder.stop();
            isRecording = false;
            String video = videoOutput(videoRecorder);

            // byte[] video = streamToBytes();
            videoRecorder.release();
            callback.invoke(mFileName.getAbsolutePath());

            
            // callback.invoke(mFileName);
            
        }
    }




    public String videoOutput(MediaRecorder videoRecorder){

        String encodedString = null;

        InputStream inputStream = null;
        try {
            inputStream = new FileInputStream(mFileName.getAbsolutePath());
        } catch (Exception e) {
            // TODO: handle exception
        }
        byte[] bytes;
        byte[] buffer = new byte[8192];
        int bytesRead;
        ByteArrayOutputStream output = new ByteArrayOutputStream();
        try {
            while ((bytesRead = inputStream.read(buffer)) != -1) {
                output.write(buffer, 0, bytesRead);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        bytes = output.toByteArray();
        String encoded = Base64.encodeToString(bytes, Base64.DEFAULT);


        
        // // Save video to Parse
        // ParseFile file = new ParseFile("bunches.mp4", bytes);
        // filesaveInBackground(SaveCallback callback)

        // ParseObject object = new ParseObject("TestObject");
        // object.put("file", file);
        // object.saveInBackground();





        //encodedString = Base64.encodeToString(bytes, true);
        return encoded;
        // Log.i("Strng", encodedString);



        // File file = new File(mFileName);
        // int size = (int) file.length();
        // byte[] bytes = new byte[size];
        // try {
        //     BufferedInputStream buf = new BufferedInputStream(new FileInputStream(file));
        //     buf.read(bytes, 0, bytes.length);
        //     buf.close();
        // } catch (FileNotFoundException e) {
        //     // TODO Auto-generated catch block
        //     e.printStackTrace();
        // } catch (IOException e) {
        //     // TODO Auto-generated catch block
        //     e.printStackTrace();
        // }
        // String encoded = Base64.encodeToString(bytes, Base64.DEFAULT);
        // return encoded;

    }





    public MediaRecorder prepareVideo(Camera camera){
        CamcorderProfile profile = CamcorderProfile.get(CamcorderProfile.QUALITY_480P);
        Camera.Parameters parameters = camera.getParameters();
        camera.setParameters(parameters);
        mediaRecorder = new MediaRecorder();
        camera.stopPreview();
        camera.lock();
        camera.setDisplayOrientation(90);
        camera.unlock();
        mediaRecorder.setCamera(camera);     
        mediaRecorder.setAudioSource(MediaRecorder.AudioSource.DEFAULT);
        mediaRecorder.setVideoSource(MediaRecorder.VideoSource.CAMERA);
        mediaRecorder.setProfile(profile);            
        mediaRecorder.setOutputFile(mFileName.getAbsolutePath());   
        mediaRecorder.setVideoFrameRate(24);
        mediaRecorder.setMaxDuration(10000);
        mediaRecorder.setOrientationHint(90);
        try {
            mediaRecorder.prepare();

        } catch (IllegalStateException e) {
            Log.d("hunter", "IllegalStateException preparing MediaRecorder: " + e.getMessage());
            
        } catch (IOException e) {
            Log.d("hunter", "IOException preparing MediaRecorder: " + e.getMessage());
        }
        return mediaRecorder;    
    }






    
}
