package com.lwansbrough.ReactCamera;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.hardware.Camera;
import android.util.Base64;
import android.widget.Toast;

import com.facebook.react.bridge.Callback;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableMap;
import android.provider.MediaStore.Images.Media;
import android.graphics.BitmapFactory;
import android.graphics.Bitmap;
import android.graphics.Matrix;
import java.io.ByteArrayOutputStream;
import java.util.Map;
import java.util.HashMap;



// For video camera
import android.media.CamcorderProfile;
import android.media.MediaRecorder;
import android.os.Environment;
import android.util.Log;
import java.io.IOException;


import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.FileNotFoundException;
import java.io.BufferedInputStream;
import java.util.Date;
import java.text.SimpleDateFormat;


// Added For Amazon AWS
import com.amazonaws.auth.CognitoCachingCredentialsProvider;
import com.amazonaws.regions.Regions;
import com.amazonaws.regions.Region;

import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3Client;
import com.amazonaws.mobileconnectors.s3.transferutility.TransferListener;
import com.amazonaws.mobileconnectors.s3.transferutility.TransferUtility;
import com.amazonaws.mobileconnectors.s3.transferutility.TransferObserver;
import com.amazonaws.mobileconnectors.s3.transferutility.TransferState;


public class ReactCameraModule extends ReactContextBaseJavaModule {
    ReactApplicationContext reactContext;
    private CameraInstanceManager cameraInstanceManager;

    // For video camera
    private boolean isRecording = false;
    MediaRecorder videoRecorder = null;
    MediaRecorder mediaRecorder = null;
    InputStream is = null;

    File mFileName = new File(Environment.getExternalStorageDirectory(), "bunches.mp4");


    public ReactCameraModule(ReactApplicationContext reactContext, CameraInstanceManager cameraInstanceManager) {
        super(reactContext);
        this.reactContext = reactContext;
        this.cameraInstanceManager = cameraInstanceManager;
    }

    @Override
    public String getName() {
        return "ReactCameraModule";
    }

    @Override
    public Map<String, Object> getConstants() {
        final Map<String, Object> constants = new HashMap<>();
            final Map<String, Object> constantsAspect = new HashMap<>();
            constantsAspect.put("stretch", "stretch");
            constantsAspect.put("fit", "fit");
        constants.put("Aspect", constantsAspect);
        return constants;
    }
    @ReactMethod
    public void capture(ReadableMap options, final Callback callback) {

        Camera camera = cameraInstanceManager.getCamera(options.getString("type"));
        camera.takePicture(null, null, new PictureTakenCallback(options, callback, reactContext));
    }

    private class PictureTakenCallback implements Camera.PictureCallback {
        ReadableMap options;
        Callback callback;
        ReactApplicationContext reactContext;

        PictureTakenCallback(ReadableMap options, Callback callback, ReactApplicationContext reactContext) {
            this.options = options;
            this.callback = callback;
            this.reactContext = reactContext;
        }

        private Bitmap RotateBitmap(Bitmap original, int deg)
        {
            Matrix matrix = new Matrix();
            matrix.postRotate((float)deg);
            return Bitmap.createBitmap(original, 0, 0, original.getWidth(), original.getHeight(), matrix, true);
        }

        @Override
        public void onPictureTaken(byte[] data, Camera camera) {
            camera.startPreview();

            int cameraOrientation = cameraInstanceManager.getCameraOrientation(camera);
            int cameraDirection = cameraInstanceManager.getCameraDirection(camera);
            BitmapFactory.Options bitmapOptions = new BitmapFactory.Options();
            bitmapOptions.inSampleSize = options.getInt("sampleSize");
            Bitmap bitmap = RotateBitmap(BitmapFactory.decodeByteArray(data, 0, data.length, bitmapOptions), cameraOrientation + cameraDirection);

            switch(options.getString("target")) {
                case "base64":
                    ByteArrayOutputStream stream = new ByteArrayOutputStream();
                    bitmap.compress(Bitmap.CompressFormat.JPEG, 100, stream);
                    byte[] byteArray = stream.toByteArray();
                    String encoded = Base64.encodeToString(byteArray, Base64.DEFAULT);
                    callback.invoke(encoded);
                break;
                case "gallery":
                    Media.insertImage(reactContext.getContentResolver(), bitmap, options.getString("title"), options.getString("description"));
                    callback.invoke();
                break;
                case "file":
                    callback.invoke();
                break;
            }
        }

    }


    private static byte[] readContentIntoByteArray(File file) {
            FileInputStream fileInputStream = null;
            byte[] bFile = new byte[(int) file.length()];
            try {
                //convert file into array of bytes
                fileInputStream = new FileInputStream(file);
                fileInputStream.read(bFile);
                fileInputStream.close();
                Log.d("hunter", "Converting...");
                for (int i = 0; i < bFile.length; i++)
                {
                    System.out.print((char) bFile[i]);
                }
            } catch (Exception e) {
                Log.d("hunter", "Messed up converting file to byte array: " + e.getMessage());
                e.printStackTrace();
            }
            return bFile;
        }
    


    @ReactMethod
    public void saveFileToParse(ReadableMap options, final Callback callback) {

        File file = new File(options.getString("path"));

        CognitoCachingCredentialsProvider credentialsProvider = new CognitoCachingCredentialsProvider(
            reactContext,
            "us-east-1:b3be3966-a986-416f-8755-57dbedb1517e",
            Regions.US_EAST_1
        );

        AmazonS3 s3 = new AmazonS3Client(credentialsProvider);
        s3.setRegion(Region.getRegion(Regions.US_WEST_2));

        TransferUtility transferUtility = new TransferUtility(s3, reactContext);

        Date date = new Date();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd-HH:mm:ss.SSSZ");
        String formattedDate = sdf.format(date);

        String fileName = "videos/bunches-" + formattedDate + ".mp4";
        TransferObserver observer = transferUtility.upload(
          "bunchesapp",
          fileName,
          file
        );

        // observer.setListener(new TransferListener() {
        //      public void onStateChanged(int id, TransferState state) {
        //         if(state.valueOf("COMPLETED")){
        //             callback.invoke(fileName);
        //         }
        //      }

        //      public void onError(int id, Exception ex) {
        //         if(ex) {
        //             callback.invoke(ex);
        //         }
        //      }
        //  });

        //callback.invoke(fileName);

 

    }


    @ReactMethod
    public void captureVideo(ReadableMap options, final Callback callback) {
        Camera camera = cameraInstanceManager.getCamera(options.getString("type"));

        int cameraOrientation = cameraInstanceManager.getCameraOrientation(camera);
        int cameraDirection = cameraInstanceManager.getCameraDirection(camera);

        if(videoRecorder == null){
            videoRecorder = prepareVideo(camera, cameraOrientation, cameraDirection); 
        }        
        if(!isRecording){            
            videoRecorder.start();
            isRecording = true;
        }  else {
            videoRecorder.stop();
            isRecording = false;
            String video = videoOutput(videoRecorder);
            videoRecorder.release();
            callback.invoke(mFileName.getAbsolutePath());
        }
    }




    public String videoOutput(MediaRecorder videoRecorder){

        String encodedString = null;

        InputStream inputStream = null;
        try {
            inputStream = new FileInputStream(mFileName.getAbsolutePath());
        } catch (Exception e) {
            // TODO: handle exception
        }
        byte[] bytes;
        byte[] buffer = new byte[8192];
        int bytesRead;
        ByteArrayOutputStream output = new ByteArrayOutputStream();
        try {
            while ((bytesRead = inputStream.read(buffer)) != -1) {
                output.write(buffer, 0, bytesRead);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        bytes = output.toByteArray();
        String encoded = Base64.encodeToString(bytes, Base64.DEFAULT);
        return encoded;
    }





    public MediaRecorder prepareVideo(Camera camera, Integer cameraOrientation, Integer cameraDirection){

        CamcorderProfile profile = CamcorderProfile.get(CamcorderProfile.QUALITY_480P);
        Camera.Parameters parameters = camera.getParameters();
        camera.setParameters(parameters);
        mediaRecorder = new MediaRecorder();
        camera.stopPreview();
        camera.lock();
        camera.setDisplayOrientation(cameraOrientation);
        camera.unlock();
        mediaRecorder.setCamera(camera);     
        mediaRecorder.setAudioSource(MediaRecorder.AudioSource.DEFAULT);
        mediaRecorder.setVideoSource(MediaRecorder.VideoSource.CAMERA);
        mediaRecorder.setProfile(profile);            
        mediaRecorder.setOutputFile(mFileName.getAbsolutePath());   
        mediaRecorder.setVideoFrameRate(24);
        mediaRecorder.setMaxDuration(10000);
        mediaRecorder.setOrientationHint(cameraOrientation + cameraDirection);
        try {
            mediaRecorder.prepare();

        } catch (IllegalStateException e) {
            Log.d("hunter", "IllegalStateException preparing MediaRecorder: " + e.getMessage());
            
        } catch (IOException e) {
            Log.d("hunter", "IOException preparing MediaRecorder: " + e.getMessage());
        }
        return mediaRecorder;    
    }

}
